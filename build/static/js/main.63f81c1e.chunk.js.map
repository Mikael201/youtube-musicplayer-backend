{"version":3,"sources":["services/GetMusic.tsx","App.tsx","index.js"],"names":["queryUrl","queryString","allVIds","allDataArray","axios","get","then","allItems","newAllTitles","data","items","map","itemsObject","snippet","title","filter","f","console","log","allvideoids","id","videoId","i","length","Object","keys","videoid","catch","e","songObject","post","delete","App","useState","isPlayed","setIsPlayed","userInput","setUserInput","queryResults","setQueryResults","songQueue","setSongQueue","isAdmin","setIsAdmin","adminText","setAdminText","setNow","disable","setDisable","useEffect","GetVideoService","songs","onClick","onPlay","event","obj","onStateChange","target","playVideo","type","placeholder","value","name","onChange","dataArray","setTimeout","query","key","style","borderStyle","disabled","queryObject","object","concat","song","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63f81c1e.chunk.js","sourcesContent":["import axios from \"axios\"\r\nconst queryUrl = 'https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=5&'\r\nconst GetVideo = (queryString: string | number): string[] => {\r\n    let allDataArray: any = [];\r\n    let allVIds: any;\r\n    axios.get(queryUrl + `q=${queryString}&fields=items(snippet(title))&key=AIzaSyBPzAsL4U5wyby53wnSwtWKa_aST71D39A`) //saadaan videoIdt\r\n        .then((allItems: any) => {\r\n            let allTitles = allItems.data.items.map((itemsObject:any) => {\r\n                return itemsObject.snippet.title;\r\n            })\r\n            let newAllTitles = allTitles.filter((f:any) => f) //remove possible undefineds\r\n            console.log(\"newAllTitles: \" + newAllTitles)\r\n            axios.get(queryUrl + `q=${queryString}&fields=items(id(videoId))&key=AIzaSyBPzAsL4U5wyby53wnSwtWKa_aST71D39A`)\r\n                .then((allvideoids: any) => {\r\n                    allVIds = allvideoids.data.items.map((itemsObject: any) => {\r\n                        return itemsObject.id.videoId\r\n                    })\r\n                    console.log(\"newAllVideoIds: \" + allVIds)\r\n                    for(let i = 0; i<newAllTitles.length; i++) {\r\n                        console.log(allVIds[Object.keys(allVIds)[i]])\r\n                        allDataArray[i] = {\r\n                            videoid: allVIds[Object.keys(allVIds)[i]],\r\n                            title: newAllTitles[i]\r\n                        }\r\n                    }\r\n                }).catch(e => console.log(e))\r\n        }).catch(e => console.log(e))\r\n        return allDataArray\r\n}\r\n\r\nconst GetSongs = () => {\r\n    return axios.get('/all')\r\n}\r\nconst SaveSong = ((songObject: any) => {\r\n    return axios.post('/song', songObject)\r\n})\r\nconst DeleteSong = ((id: any) => {\r\n    return axios.delete(`/song/${id}`)\r\n})\r\n\r\nexport default {\r\n    GetVideo:GetVideo,\r\n    GetSongs:GetSongs,\r\n    SaveSong:SaveSong,\r\n    DeleteSong:DeleteSong\r\n}","import React, {useState, useEffect} from 'react';\nimport GetVideoService from './services/GetMusic'\nimport YouTube from 'react-youtube';\nconst App = () => {\n  const [isPlayed, setIsPlayed] = useState<string>('')\n  const [userInput, setUserInput] = useState<string>('')\n  const [queryResults, setQueryResults] = useState<string[]>([])\n  const [songQueue, setSongQueue] = useState<any>([])\n  const [isAdmin, setIsAdmin] = useState<boolean>(false)\n  const [adminText, setAdminText] = useState<string>('')\n  const [now, setNow] = useState<string>('')\n  const [disable, setDisable] = useState<boolean>(false)\n  useEffect(() => {\n    GetVideoService.GetSongs()\n      .then((songs: any) => {\n        console.log(songs.data.data)\n        setSongQueue(songs.data.data)\n      })\n  },[])\n  const makeQuery = () => {\n    setDisable(false)\n    let dataArray = GetVideoService.GetVideo(userInput)\n    setTimeout(() => {\n      setQueryResults(dataArray)\n    },4000)\n  }\n  const change = (event:any) => {\n    setUserInput(event.target.value)\n  }\n  const adminChange = (event:any) => {\n    setAdminText(event.target.value)\n    if(adminText === 'YOUSHOULDNEVERDOITLIKETHIS') { // this is done like this because we dont have any login on the page (how to be admin) + on parties no-one has computers so they cant see the source code from for i.e. developer tools that easy. However it's crucial that the users who are on phone cant see the Youtube media player. This should be visible only for the main music playing device for i.e. the computer.\n      setIsAdmin(true)\n    }\n  }\n  const putToQueue = (queryObject:any): any => {\n    setDisable(true)\n    GetVideoService.SaveSong(queryObject)\n      .then((object:any) => {\n        setSongQueue(songQueue.concat(object))\n        setUserInput('')\n        setQueryResults([])\n        GetVideoService.GetSongs()\n          .then((songs: any) => {\n            console.log(songs.data.data)\n            setSongQueue(songs.data.data)\n      })\n      }).catch(e => console.log(e))\n  }\n  const takeNextSong = (event:any) => {\n    console.log(\"onEnd triggered\")\n    GetVideoService.GetSongs()\n    .then((songs: any) => {\n      console.log(songs.data.data)\n      setSongQueue(songs.data.data)\n    })\n      event.target.playVideo()\n  }\n  const showQueue = () =>\n  songQueue.map((song:any) =>  \n      <div key={song.videoid} style={{borderStyle: '5px solid red'}}>\n        <h5>{song.title}</h5>\n      </div>\n)\n  const getQueryResults = () => \n    queryResults.map((query:any) => \n      <div key={query.videoid} style={{borderStyle: 'solid'}}>\n        <h5>{query.title}</h5><button disabled={disable} onClick={() => putToQueue(query)}>JONOON</button> <br />\n      </div>\n)\nconst play = (event:any) => {\n  GetVideoService.DeleteSong(isPlayed)\n  .then(() => {\n    console.log(\"tuleeko takeNextSongDeleteSong\")\n    setNow(songQueue[0].title)\n    setSongQueue(songQueue.filter((obj:any) => obj.videoid !== isPlayed))\n    setIsPlayed(songQueue[0].videoid)\n  })\n}\n  return(\n    <div>\n      {isAdmin ? \n      <div>\n        <button onClick={() => setIsPlayed(songQueue[0].videoid)}>aloita</button>\n        <YouTube\n          onPlay={play}\n          onStateChange={takeNextSong}\n          videoId={isPlayed}\n        /></div> : null}\n        <input type = \"text\" placeholder=\"biisin nimi / esittäjä tmv\" value={userInput} name=\"userInput\" onChange={change}></input> <button onClick = {makeQuery}>Etsi</button><br />\n        {getQueryResults()} <br /> <br />\n        Biisijono: <br />\n        {showQueue()} <br /> <br /> <br />\n        <input type = \"text\" placeholder=\"tube playerin käyttöönotto\" value={adminText} name=\"adminText\" onChange={adminChange}></input>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}